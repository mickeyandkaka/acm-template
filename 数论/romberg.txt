//待测

double romberg(double a, double b, double EPS = 1e-6) {
    double t[MAXN][MAXN] = {0}, tmp;
    int i, j, k, k2, m, m4;
    t[0][0] = (func(a) + func(b)) * (b - a) / 2;
    k = 1; k2 = 1;
    while (1) {
        tmp  = 0;
        for (i = 1; i <= k2; i++) {
            tmp += func(a + (2 * i - 1) * (b - a) / (2 * k2));
        }
        t[0][k] = (t[0][k - 1] + tmp * (b - a) / k2) / 2;
        for (m = 1, m4=4; m <= k; m++, m4 *= 4) {
            t[m][k - m] = (m4 * t[m - 1][k - m + 1] - t[m - 1][k - m]) / (m4 - 1);
        }
        if (fabs(t[k][0] - t[k - 1][0]) < EPS) break;
        k++; k2 *= 2;
    }
    return t[k][0];
}

function [quad,R]=Romberg(f,a,b,eps)
h=b-a;
R(1,1)=h*(feval(f,a)+feval(f,b))/2;
M=1;J=1;err=1;
while err>eps
    J=J+1;
    h=h/2;
    S=0;
    for p=1:M
        x=a+h*(2*p-1);
        S=S+feval(f,x);
    end
    R(J+1,1)=R(J,1)/2+h*S;
    M=2*M;
    for k=1:J
        R(J+1,k+1)=R(J+1,k)+(R(J+1,k)-R(J,k))/(4^k-1);
    end
    err=abs(R(J+1,J)-R(J+1,J+1));
end
quad=R(J+1,J+1);


double romberg(double aa, double bb)
{
    int m, n;//m控制迭代次数, 而n控制复化梯形积分的分点数. n=2^m
    double h, x;
    double s, q;
    double ep; //精度要求
    double *y = new double[MAXREPT];//为节省空间,只需一维数组
    //每次循环依次存储Romberg计算表的每行元素,以供计算下一行,算完后更新
    double p;//p总是指示待计算元素的前一个元素(同一行)

    //迭代初值
    h = bb - aa;
    y[0] = h*(fun(aa) + fun(bb))/2.0;
    m = 1;
    n = 1;
    ep = eps + 1.0;

    //迭代计算
    while ((ep >= eps) && (m  < MAXREPT))
    {
        //复化积分公式求T2n(Romberg计算表中的第一列),n初始为1,以后倍增
        p = 0.0;
        for (int i=0; i <n; i++)//求Hn
        {
            x = aa + (i+0.5)*h;
            p = p + fun(x);
        }
        p = (y[0] + h*p)/2.0;//求T2n = 1/2(Tn+Hn),用p指示

        //求第m行元素,根据Romberg计算表本行的前一个元素(p指示),
        //和上一行左上角元素(y[k-1]指示)求得.
        s = 1.0;
        for (int k=1; k <=m; k++)
        {
            s = 4.0*s;
            q = (s*p - y[k-1])/(s - 1.0);
            y[k-1] = p;
            p = q;
        }

        p = fabs(q - y[m-1]);
        m = m + 1;
        y[m-1] = q;
        n = n + n; h = h/2.0;
    }
    return (q);
}