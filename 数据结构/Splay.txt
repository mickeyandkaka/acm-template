/* 
 * Splay Tree 
 * 所处理的数组下标为1-N，为实现方便，在0和N+1的位置增加一个key为inf的结点 
 * select()函数中的kth与实际下边的关系如下 
 * inf -   num -  num -  num - num -  inf 
 *  0      1       2      3     4      5 
 * 另外用null节点替换空指针 
 */ 
#define keytree root->ch[1]->ch[0]
struct node
{
    int size,rev;
    int key,delta,minv;
    node *ch[2], *pre;

    void reverse(){
        if (size == 0) return;
        rev ^= 1;
        swap(ch[0], ch[1]);
    }
    void add(int v){
        if(size == 0)   return;
        delta+=v,key+=v,minv+=v;
    }
    void update(){
        size = ch[0]->size + ch[1]->size + 1;
        minv = min(key,min(ch[0]->minv,ch[1]->minv));
    }
    void pushdown(){
        if (rev){
            ch[0]->reverse();
            ch[1]->reverse();
            rev = 0;
        }
        if(delta){
            ch[0]->add(delta);
            ch[1]->add(delta);
            delta = 0;
        }
    }
};

node tree[200003], *sta[200001];
node* hash[200001];

int data[200001];
class SPLAY
{
public:
    node *null, *root;
    int top,cnt,viscnt;

    void init(){
        top = cnt = viscnt = 0;
        null = newnode(INF), null->size = 0;
        null->ch[0] = null->ch[1] = null->pre = null;
        root = newnode(INF), root->ch[1] = newnode(INF);
        root->ch[1]->pre = root;
        root->update();
    }

    node* newnode(int x){
        node *p;
        if (top) p = sta[top --];
        else p = &tree[cnt++];
        p->key = p->minv = x;
        p->size = 1;
        p->delta = p->rev = 0;
        p->ch[0] = p->ch[1] = p->pre = null;
        return p;
    }

    void rotate(node *x, int c){
        node *y = x->pre;
        y->pushdown(), x->pushdown();
        y->ch[! c] = x->ch[c], x->pre = y->pre;
        if (x->ch[c] != null) x->ch[c]->pre = y;
        if (y->pre != null) y->pre->ch[y == y->pre->ch[1]] = x;
        y->pre = x, x->ch[c] = y, y->update();
        if (root == y) root = x;
    }
	
	/*
     * 旋转使x成为f的子节点，若f为null则x旋转为根节点
     * x会执行pushdown和update的操作
     */
    void splay(node *x, node *f){
        for (x->pushdown(); x->pre != f; )
            if (x->pre->pre == f)
                rotate(x, x == x->pre->ch[0]);
            else
            {
                node *y = x->pre, *z = y->pre;
                if (y == z->ch[0])
                    if (x == y->ch[0])
                        rotate(y, 1), rotate(x, 1);
                    else
                        rotate(x, 0), rotate(x, 1);
                else if (x == y->ch[1])
                    rotate(y, 0), rotate(x, 0);
                else
                    rotate(x, 1), rotate(x, 0);
            }
        x->update();
    }
	
	/* 
     * 找到位置为k的节点，并将其升至x的儿子
     * k节点会执行pushdown和update的操作
     */ 
    void select(int k, node *f){
        for (node *now = root;; ){
            now->pushdown();
            int tmp = now->ch[0]->size;
            if (k == tmp){
                splay(now, f);
                return;
            }
            now = now->ch[k > tmp];
            if (k > tmp) k -= tmp + 1;
        }
    }

    void maketree(int l, int r){
        init();
        keytree = build(l, r);
        keytree->pre = root->ch[1];
        splay(keytree, null);
    }

    node *build(int l, int r){
        if (l > r) return null;
        int mid = (l + r) >> 1;
        node *p = newnode(data[mid]);
        hash[data[mid]] = p;
        p->ch[0] = build(l, mid - 1);
        p->ch[1] = build(mid + 1, r);
        if (p->ch[0] != null)
            p->ch[0]->pre = p;
        if (p->ch[1] != null)
            p->ch[1]->pre = p;
        p->update();
        return p;
    }

	//x位置后插入key
    void insert(int x, int key){
        select(x, null);
        select(x + 1, root);
        keytree = newnode(key);
        keytree->pre = root->ch[1];
        root->ch[1]->update();
        splay(keytree, null);
    }

	//x位之后插入data[l,r]序列
    void insert(int x, int l, int r){
        select(x, null);
        select(x + 1, root);
        keytree = build(l, r);
        keytree->pre = root->ch[1];
        root->ch[1]->update();
        splay(keytree, null);
    }

    void erase(node *x){
        if (x == null) return;
        erase(x->ch[0]);
        erase(x->ch[1]);
        sta[++top] = x;
    }

	//del[x,y]
    void dele(int x, int y){
        select(x - 1, null);
        select(y + 1, root);
        erase(keytree);
        keytree = null;
        root->ch[1]->update();
        root->update();
    }

    //del x位置
    void dele(int x){
        select(x, null);
        deleroot();
    }
	
    //del 某节点
    void dele(node* t){
        splay(t, null);
        deleroot();
    }

    void deleroot(){
        node *oldRoot = root;
        root = root->ch[1];
        root->pre = null;
        select(0, null);
        root->ch[0] = oldRoot->ch[0];
        root->ch[0]->pre = root;
        root->update();
        sta[++top] = oldRoot;
    }

	//[l,r]翻转
    void reverse(int l, int r){
        select(l - 1, null);
        select(r + 1, root);
        keytree->reverse();
    }

	//查询key位置
    int query(int key){
        splay(hash[key], null);
        int ans = root->ch[0]->size;
        return ans;
    }

	//[l,r]增加v
    void add(int l,int r,int v)
    {
        select(l-1,null);
        select(r+1,root);
        keytree->add(v);
        splay(keytree,null);
    }

	//[l,r]循环右移d位
    void revolve(int x, int y, int d){
        int len = y - x + 1;
        d = (d % len + len) % len;
        if (d == 0) return;
        if (d == 1){
            dele(y);
            insert(x - 1, sta[top]->key);
        }
        else{
            select(y - d + 1, null);
            select(y + 1, root);
            select(x - 1, root);
            select(y, root->ch[1]);
            node *p = root->ch[0]->ch[1];
            root->ch[0]->ch[1] = null;
            root->ch[0]->update();
            keytree->ch[1] = p;
            p->pre = keytree;
            splay(p, null);
        }
    }

    int getmin(int l,int r){
        select(l - 1, null);
        select(r + 1, root);
        return keytree->minv;
    }
	
	void debug(){
        vis(root);
    }
	
    void vis(node* t){
        if (t == null) return;
        t->pushdown();
        vis(t->ch[0]);
        if(t->key !=-INF){
            viscnt++;
            printf("%d%c",t->key,viscnt== n?'\n':' ');
        }
        vis(t->ch[1]);
        t->update();
    }
};