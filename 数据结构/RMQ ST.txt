//下标1开始 闭区间查询
const int MAX = 50010;
int dp[MAX][20];
int val[MAX],ln2[MAX];

void initRMQ(int n)
{
	int i,j;
	//放到外面
    ln2[0] = ln2[1] = 0;
    for(i=2; i<=n; i++) ln2[i] = ln2[i>>1]+1;
	
    for(i=1; i<=n; i++) dp[i][0] = val[i];

    for(j=1; j<=ln2[n]; j++)
        for(i=1; i+(1<<j)-1<=n; i++)
            dp[i][j] = min(dp[i][j-1],dp[i+( 1<<(j-1) )][j-1]);
}

int query(int a,int b)
{
    int k = ln2[b-a+1];
    return min(dp[a][k],dp[b-(1<<k)+1][k]);
}


//2D
const int MAX = 301;
int dp[MAX][MAX][9][9];
int val[MAX][MAX],ln2[MAX];

void initRMQ(int n,int m)
{
    int i,j,u,v;
	//放到外面
    ln2[0] = ln2[1] = 0;
    for(int i=2; i<=300; i++) ln2[i] = ln2[i>>1]+1;
    
    for(i=1; i<=n; i++)
        for(j=1; j<=m; j++)
            dp[i][j][0][0] = val[i][j];

    for(u=0; u<=ln2[n]; u++)
        for(v=0; v<=ln2[m]; v++)    if(u|v)
            for(i=1; i+(1<<u)-1<=n; i++)
                for(j=1; j+(1<<v)-1<=m; j++)
                {
                    if(u==0)
                        dp[i][j][u][v]=max(dp[i][j][u][v-1],dp[i][j+(1<<(v-1))][u][v-1]);
                    else
                        dp[i][j][u][v]=max(dp[i][j][u-1][v],dp[i+(1<<(u-1))][j][u-1][v]);
                }
}

int query(int l1,int l2,int r1,int r2)
{
    if(l1>l2)swap(l1,l2);
    if(r1>r2)swap(r1,r2);
    int kn=ln2[l2-l1+1];
    int km=ln2[r2-r1+1];
    int v1=dp[l1][r1][kn][km];
    int v2=dp[l1][r2-(1<<km)+1][kn][km];
    int v3=dp[l2-(1<<kn)+1][r1][kn][km];
    int v4=dp[l2-(1<<kn)+1][r2-(1<<km)+1][kn][km];
    return max(max(v1,v2),max(v3,v4));
}