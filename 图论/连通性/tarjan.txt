int dfn[N], low[N], idx, scc;
int stk[N], instk[N], top;

void dfs(int u){
    dfn[u] = low[u] = ++idx;
    stk[top++] = u, instk[u] = true;

    for(int i=head[u]; ~i; i=edge[i].next){
        int v = edge[i].v;
        if(dfn[v] == -1){
            dfs(v);
            low[u] = min(low[u], low[v]);
        }else if(instk[v] == true){
            low[u] = min(low[u], dfn[v]);
        }
    }

    int p;
    if(low[u] == dfn[u]){
        scc++;
        do{
            p = stk[--top];
            instk[p] = false;
        }while(u != p);
    }
}

void solve(){
    clr(dfn, -1), idx = scc = 0;
    clr(instk, 0), top = 0;
    for(int i=1; i<=n; i++)
        if(dfn[i] == -1)
            dfs(i);
}
